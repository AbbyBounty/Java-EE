+ Model View Controller( MVC )
	- It is a design pattern. It can be used to design web application 		  in standard manner.
	- It able to define which elements we have to use for which 		  purpose.
	- It able to provide clear-cut seperation between the roles and 	  responsibilities of the component in a web application.
	- According to MVC design pattern, three component must be exist 		  at server side:
		1. Model
		2. View
		3. Controller
	- Servlet or equivalent component( e.g Filter ) can be used as 	  		  controller. In struts 1.x, servlet is used as controller whereas 		  in struts 2.x, Filter is used as controller.
	  Set of JSP's can be used as view component.
	  Java Beans can be used as Model component at server side.
	- Rules for designing application using MVC:
		1. We must use servlet as controller, set of JSP's as 			   view. we should not interchange these two component.
		2. In case of MVC based web application, every request 			   must be taken by controller servlet only.
		3. Every response must be generated by view part only.
		4. Both controller and view part should not interact with 			   databases directly. Using model component they can 			   interact with databases.
		5. We can write n number of JSP's in the web application 			   but it must be java code less.	
		6. All JSP's must not provide page to page communication 			   rather it must provide page-controller-page navigation. 			   If we are providing page to page navigation it means 		   that we are neglecting controller component.
		7. In general, Controller is having responsiblity to get 			   the data from client and to set the data to model part. 			   Model part will use the data in application logic. In 			   the same way, JSP's having responsibility to get the 		   data from model part, not to set the data to model part.

+ Push and Pull Notification Mechanisms:
	- Web applications are stateless as they use the stateless 		  protocol"HTTP". So once request is served to the client then 		  there is no direct way of notifying him/her about the changes 	  made to the model. To handle this scenario there are two 		  mechanisms:	
		1. Push mechanism.
		2. Pull mechanism.
	- Push mechanism:
		* Forcibly sending the response back to the client 			  whenever any change to the Model happens.
	- Pull mechanism:
		* It requires the client to pull the updated data rather 			  than the server pushing the updated data to client.
